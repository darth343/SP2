/******************************************************************************/
/*!
\file	AI.h
\author Arun Ezekiel
\par	email: 153598U\@mymail.nyp.edu.sg
\brief
Class to define Aliens
*/
/******************************************************************************/
#ifndef AI_H
#define AI_H
#include "Pathfinder.h"
#include "Mesh.h"
#include "MatrixStack.h"
#include "Camera5.h"
#include "Player.h"

/****************************************************************************/
/*!
Class AI:
\brief Defines an Alien with meshes, health, and other necessary variables
*/
/****************************************************************************/

class AI
{
public:
	AI()
	{
		m_Head	= 0;
		m_Body	= 0;
		m_HandL	= 0;
		m_HandR	= 0;
		m_LegL	= 0;
		m_LegR	= 0;
		transparency = 1;
		tempPos = Vector3(0, 0, 0);
		prevAngle = 0;
		angleRad = 0;
		nextAngle = 0;
		animate = true;
		prevPos = Vector3(0,0,0);
		rightHand = 0;
		leftHand = 0;
		rightLeg = 0;
		leftLeg = 0;
		moveHand = false;
		moveHandIdle = false;
		attacked = false;
		health = 250;
		deathPivot = Vector3(0,0,0);
		deathRendered = false;
		deathAngle = 0;
	};
	~AI(){};
	/****************************************************************************/
	/*!
	Gets Angle the Alien is facing
	*/
	/****************************************************************************/
	float getAngle();
	/****************************************************************************/
	/*!
	Renders all alien meshes (head to toes)
	*/
	/****************************************************************************/
	void renderAlien(bool enableLight, MS modelStack, MS viewStack, MS projectionStack, unsigned int m_parameters[25], Mesh ** meshlist, Player & player);
	/****************************************************************************/
	/*!
	Moves all Alien meshes (head to toes)
	*/
	/****************************************************************************/
	void move(Camera5 camera, Mesh ** meshList, double dt, Player & player);
	/****************************************************************************/
	/*!
	Finds a path from current position to player
	*/
	/****************************************************************************/
	void findPath(Camera5 camera, Mesh ** meshList, int modelStart, int modelEnd);
	/****************************************************************************/
	/*!
	Animates all Alien meshes by rotating by an angle (head to toes)
	*/
	/****************************************************************************/
	void animation(double dt, Player & player);
	/****************************************************************************/
	/*!
	Plays death animation
	*/
	/****************************************************************************/
	void deathAnimation(double dt, Camera5 camera);
	/****************************************************************************/
	/*!
	Inflicts damage to the player
	*/
	/****************************************************************************/
	void damagePlayer(Player & player);
	/****************************************************************************/
	/*!
	Mesh pointer of Alien Head
	*/
	/****************************************************************************/
	Mesh * m_Head;
	/****************************************************************************/
	/*!
	Mesh pointer of Alien Body
	*/
	/****************************************************************************/
	Mesh * m_Body;
	/****************************************************************************/
	/*!
	Mesh pointer of Alien Left Hand
	*/
	/****************************************************************************/
	Mesh * m_HandL;
	/****************************************************************************/
	/*!
	Mesh pointer of Alien Right Hand
	*/
	/****************************************************************************/
	Mesh * m_HandR;
	/****************************************************************************/
	/*!
	Mesh pointer of Alien Left Leg
	*/
	/****************************************************************************/
	Mesh * m_LegL;
	/****************************************************************************/
	/*!
	Mesh pointer of Alien Right Leg
	*/
	/****************************************************************************/
	Mesh * m_LegR;
	/****************************************************************************/
	/*!
	Float that controls alien transparency
	*/
	/****************************************************************************/
	float transparency;
	/****************************************************************************/
	/*!
	boolean to animate Alien
	*/
	/****************************************************************************/
	bool animate;
	/****************************************************************************/
	/*!
	Vector3 to store position
	*/
	/****************************************************************************/
	Vector3 position;
	/****************************************************************************/
	/*!
	Mesh pointer of Alien Head
	*/
	/****************************************************************************/
	Vector3 tempPos;
	/****************************************************************************/
	/*!
	Health Value opf Alien 
	*/
	/****************************************************************************/
	float health;
	/****************************************************************************/
	/*!
	Check if Alien is Dead
	*/
	/****************************************************************************/
	bool isDead() { if (health <= 0)return true; return false; };
	/****************************************************************************/
	/*!
	Death Count Value of Aliens
	*/
	/****************************************************************************/
	static int deathCount;
private:
	/****************************************************************************/
	/*!
	Vector between Alien and next path
	*/
	/****************************************************************************/
	Vector3 inBetween;
	/****************************************************************************/
	/*!
	Value of angle between Alien and next path in rads
	*/
	/****************************************************************************/
	float angleRad;
	/****************************************************************************/
	/*!
	Value of angle that Alien needs to rotate
	*/
	/****************************************************************************/
	float nextAngle;
	/****************************************************************************/
	/*!
	Value of angle that Alien rotated previously
	*/
	/****************************************************************************/
	float prevAngle;
	/****************************************************************************/
	/*!
	Value of previous position of the camera
	*/
	/****************************************************************************/
	Vector3 prevPos;
	/****************************************************************************/
	/*!
	Pathfinding class that handles pathfinding toward the player
	*/
	/****************************************************************************/
	PathFinding m_path;
	/****************************************************************************/
	/*!
	Enum for which hand is moving
	*/
	/****************************************************************************/
	enum hands
	{
		left = 0,
		right
	};
	/****************************************************************************/
	/*!
	Vector in between camera and Alien
	*/
	/****************************************************************************/
	Vector3 distance;
	/****************************************************************************/
	/*!
	Animation Variables
	*/
	/****************************************************************************/
		/****************************************************************************/
		/*!
		Hand Animation Variables
		*/
		/****************************************************************************/
		bool moveHand;
		/****************************************************************************/
		/*!
		Hand Animation Variables
		*/
		/****************************************************************************/
		bool moveHandIdle;
		/****************************************************************************/
		/*!
		Hand Animation Variables
		*/
		/****************************************************************************/
		float prightHand;
		/****************************************************************************/
		/*!
		Hand Animation Variables
		*/
		/****************************************************************************/
		float rightHand;
		/****************************************************************************/
		/*!
		Hand Animation Variables
		*/
		/****************************************************************************/
		float pleftHand;
		/****************************************************************************/
		/*!
		Hand Animation Variables
		*/
		/****************************************************************************/
		float leftHand;

		/****************************************************************************/
		/*!
		Leg Animation Variables
		*/
		/****************************************************************************/
		bool leg = left;
		/****************************************************************************/
		/*!
		Leg Animation Variables
		*/
		/****************************************************************************/
		float rightLeg;
		/****************************************************************************/
		/*!
		Leg Animation Variables
		*/
		/****************************************************************************/
		float prightLeg;
		/****************************************************************************/
		/*!
		Leg Animation Variables
		*/
		/****************************************************************************/
		float leftLeg;
		/****************************************************************************/
		/*!
		Leg Animation Variables
		*/
		/****************************************************************************/
		float pleftLeg;

		/****************************************************************************/
		/*!
		boolean to check if attack animation has played
		*/
		/****************************************************************************/
		bool attacked;
		/****************************************************************************/
		/*!
		Death Animation variables
		*/
		/****************************************************************************/
		Vector3 deathPivot;
		/****************************************************************************/
		/*!
		Death Animation variables
		*/
		/****************************************************************************/
		bool deathRendered;
		/****************************************************************************/
		/*!
		Death Animation variables
		*/
		/****************************************************************************/
		float deathAngle;
};

#endif